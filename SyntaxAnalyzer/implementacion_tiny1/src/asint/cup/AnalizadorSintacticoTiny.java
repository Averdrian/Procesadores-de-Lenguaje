
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Apr 24 23:53:15 CEST 2021
//----------------------------------------------------

package asint.cup;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Apr 24 23:53:15 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\005\000\002\004\003" +
    "\000\002\005\005\000\002\005\005\000\002\005\012\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\010\000\002\006" +
    "\006\000\002\006\004\000\002\007\005\000\002\007\003" +
    "\000\002\010\004\000\002\011\004\000\002\011\002\000" +
    "\002\012\004\000\002\012\005\000\002\013\003\000\002" +
    "\014\005\000\002\014\003\000\002\015\005\000\002\015" +
    "\010\000\002\015\007\000\002\016\003\000\002\016\002" +
    "\000\002\017\004\000\002\017\002\000\002\015\004\000" +
    "\002\015\004\000\002\015\003\000\002\015\004\000\002" +
    "\015\004\000\002\015\007\000\002\015\005\000\002\020" +
    "\003\000\002\020\002\000\002\021\005\000\002\021\003" +
    "\000\002\022\005\000\002\022\005\000\002\022\003\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\003\000\002\025\005\000\002\025\003\000\002\026" +
    "\004\000\002\026\004\000\002\026\003\000\002\027\006" +
    "\000\002\027\005\000\002\027\003\000\002\030\004\000" +
    "\002\030\003\000\002\031\005\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\003" +
    "\000\002\032\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\035\003\000\002\035\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\060\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\013\011\014\ufffe\020\ufffe\023\ufffe" +
    "\024\004\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033" +
    "\012\044\ufffe\045\ufffe\061\ufffe\062\ufffe\066\ufffe\001\002" +
    "\000\022\006\013\025\022\034\020\035\017\036\014\037" +
    "\023\040\021\041\016\001\002\000\006\074\216\075\217" +
    "\001\002\000\004\002\215\001\002\000\006\074\ufffc\075" +
    "\ufffc\001\002\000\052\004\103\005\104\006\106\007\072" +
    "\010\075\011\100\012\110\014\105\020\111\023\064\026" +
    "\115\027\077\030\113\031\061\032\112\044\076\045\066" +
    "\061\102\062\114\066\107\001\002\000\004\006\043\001" +
    "\002\000\022\006\013\025\022\034\020\035\017\036\014" +
    "\037\023\040\021\041\016\001\002\000\006\006\ufff4\072" +
    "\ufff4\001\002\000\006\006\ufff7\072\ufff7\001\002\000\004" +
    "\006\042\001\002\000\004\064\035\001\002\000\006\006" +
    "\ufff8\072\ufff8\001\002\000\006\006\ufff6\072\ufff6\001\002" +
    "\000\022\006\013\025\022\034\020\035\017\036\014\037" +
    "\023\040\021\041\016\001\002\000\004\066\024\001\002" +
    "\000\006\006\ufff5\072\ufff5\001\002\000\022\006\013\025" +
    "\022\034\020\035\017\036\014\037\023\040\021\041\016" +
    "\001\002\000\004\006\033\001\002\000\006\067\031\074" +
    "\030\001\002\000\006\067\uffef\074\uffef\001\002\000\022" +
    "\006\013\025\022\034\020\035\017\036\014\037\023\040" +
    "\021\041\016\001\002\000\006\006\ufff2\072\ufff2\001\002" +
    "\000\006\067\ufff0\074\ufff0\001\002\000\006\067\uffee\074" +
    "\uffee\001\002\000\006\006\ufff1\072\ufff1\001\002\000\004" +
    "\004\036\001\002\000\004\065\037\001\002\000\004\042" +
    "\040\001\002\000\022\006\013\025\022\034\020\035\017" +
    "\036\014\037\023\040\021\041\016\001\002\000\006\006" +
    "\ufff3\072\ufff3\001\002\000\006\074\ufffb\075\ufffb\001\002" +
    "\000\004\062\044\001\002\000\024\006\uffec\025\uffec\034" +
    "\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\063\uffec" +
    "\001\002\000\024\006\013\025\022\034\020\035\017\036" +
    "\014\037\023\040\021\041\016\063\050\001\002\000\024" +
    "\006\uffed\025\uffed\034\uffed\035\uffed\036\uffed\037\uffed\040" +
    "\uffed\041\uffed\063\uffed\001\002\000\006\006\054\072\055" +
    "\001\002\000\004\066\051\001\002\000\060\004\ufffe\005" +
    "\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\011" +
    "\014\ufffe\020\ufffe\023\ufffe\024\004\026\ufffe\027\ufffe\030" +
    "\ufffe\031\ufffe\032\ufffe\033\012\044\ufffe\045\ufffe\061\ufffe" +
    "\062\ufffe\066\ufffe\001\002\000\004\067\053\001\002\000" +
    "\006\074\ufff9\075\ufff9\001\002\000\024\006\uffeb\025\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\063" +
    "\uffeb\001\002\000\004\006\056\001\002\000\024\006\uffea" +
    "\025\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041" +
    "\uffea\063\uffea\001\002\000\072\002\uffc4\015\uffc4\016\uffc4" +
    "\017\uffc4\021\uffc4\022\uffc4\043\uffc4\044\uffc4\045\uffc4\046" +
    "\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\060\uffc4\063\uffc4\064\uffc4\065" +
    "\uffc4\067\uffc4\070\uffc4\071\uffc4\073\uffc4\074\uffc4\001\002" +
    "\000\072\002\uffc6\015\uffc6\016\uffc6\017\uffc6\021\uffc6\022" +
    "\uffc6\043\uffc6\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\063\uffc6\064\uffc6\065\uffc6\067\uffc6\070\uffc6" +
    "\071\uffc6\073\uffc6\074\uffc6\001\002\000\030\004\103\005" +
    "\104\006\106\007\072\010\075\011\100\012\110\044\076" +
    "\045\066\061\102\062\114\001\002\000\010\002\uffe9\067" +
    "\uffe9\074\127\001\002\000\072\002\uffc9\015\uffc9\016\uffc9" +
    "\017\uffc9\021\uffc9\022\uffc9\043\uffc9\044\uffc9\045\uffc9\046" +
    "\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\056\uffc9\057\uffc9\060\uffc9\063\uffc9\064\146\065" +
    "\uffc9\067\uffc9\070\147\071\uffc9\073\145\074\uffc9\001\002" +
    "\000\004\006\204\001\002\000\064\002\uffcc\015\uffcc\016" +
    "\uffcc\017\uffcc\021\uffcc\022\uffcc\043\uffcc\044\uffcc\045\200" +
    "\046\201\047\177\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\063\uffcc\065\uffcc" +
    "\067\uffcc\071\uffcc\074\uffcc\001\002\000\024\004\103\005" +
    "\104\006\106\007\072\010\075\011\100\012\110\045\066" +
    "\062\114\001\002\000\056\002\uffce\015\uffce\016\uffce\017" +
    "\uffce\021\uffce\022\uffce\043\uffce\044\uffce\050\uffce\051\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060" +
    "\uffce\063\uffce\065\uffce\067\uffce\071\uffce\074\uffce\001\002" +
    "\000\006\002\001\067\001\001\002\000\056\002\uffd0\015" +
    "\uffd0\016\uffd0\017\uffd0\021\uffd0\022\uffd0\043\uffd0\044\uffd0" +
    "\050\uffd0\051\165\052\166\053\172\054\170\055\167\056" +
    "\171\057\uffd0\060\uffd0\063\uffd0\065\uffd0\067\uffd0\071\uffd0" +
    "\074\uffd0\001\002\000\072\002\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\021\uffbc\022\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054\uffbc\055" +
    "\uffbc\056\uffbc\057\uffbc\060\uffbc\063\uffbc\064\uffbc\065\uffbc" +
    "\067\uffbc\070\uffbc\071\uffbc\073\uffbc\074\uffbc\001\002\000" +
    "\042\002\uffd2\015\uffd2\016\uffd2\017\uffd2\021\uffd2\022\uffd2" +
    "\043\157\044\156\050\uffd2\057\161\060\162\063\uffd2\065" +
    "\uffd2\067\uffd2\071\uffd2\074\uffd2\001\002\000\004\050\154" +
    "\001\002\000\072\002\uffbf\015\uffbf\016\uffbf\017\uffbf\021" +
    "\uffbf\022\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\047\uffbf" +
    "\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf\056" +
    "\uffbf\057\uffbf\060\uffbf\063\uffbf\064\uffbf\065\uffbf\067\uffbf" +
    "\070\uffbf\071\uffbf\073\uffbf\074\uffbf\001\002\000\024\004" +
    "\103\005\104\006\106\007\072\010\075\011\100\012\110" +
    "\045\066\062\114\001\002\000\030\004\103\005\104\006" +
    "\106\007\072\010\075\011\100\012\110\044\076\045\066" +
    "\061\102\062\114\001\002\000\072\002\uffbe\015\uffbe\016" +
    "\uffbe\017\uffbe\021\uffbe\022\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054" +
    "\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\067\uffbe\070\uffbe\071\uffbe\073\uffbe\074\uffbe\001" +
    "\002\000\016\002\uffe7\016\uffe7\017\uffe7\022\uffe7\067\uffe7" +
    "\074\uffe7\001\002\000\030\004\103\005\104\006\106\007" +
    "\072\010\075\011\100\012\110\044\076\045\066\061\102" +
    "\062\114\001\002\000\072\002\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\021\uffc1\022\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1" +
    "\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055" +
    "\uffc1\056\uffc1\057\uffc1\060\uffc1\063\uffc1\064\uffc1\065\uffc1" +
    "\067\uffc1\070\uffc1\071\uffc1\073\uffc1\074\uffc1\001\002\000" +
    "\072\002\uffc0\015\uffc0\016\uffc0\017\uffc0\021\uffc0\022\uffc0" +
    "\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\051" +
    "\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0" +
    "\060\uffc0\063\uffc0\064\uffc0\065\uffc0\067\uffc0\070\uffc0\071" +
    "\uffc0\073\uffc0\074\uffc0\001\002\000\030\004\103\005\104" +
    "\006\106\007\072\010\075\011\100\012\110\044\076\045" +
    "\066\061\102\062\114\001\002\000\072\002\uffc2\015\uffc2" +
    "\016\uffc2\017\uffc2\021\uffc2\022\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2" +
    "\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\063\uffc2\064" +
    "\uffc2\065\uffc2\067\uffc2\070\uffc2\071\uffc2\073\uffc2\074\uffc2" +
    "\001\002\000\060\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\011\ufffe\012\ufffe\013\011\014\ufffe\020\ufffe\023\ufffe" +
    "\024\004\026\ufffe\027\ufffe\030\ufffe\031\ufffe\032\ufffe\033" +
    "\012\044\ufffe\045\ufffe\061\ufffe\062\ufffe\066\ufffe\001\002" +
    "\000\072\002\uffbd\015\uffbd\016\uffbd\017\uffbd\021\uffbd\022" +
    "\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057" +
    "\uffbd\060\uffbd\063\uffbd\064\uffbd\065\uffbd\067\uffbd\070\uffbd" +
    "\071\uffbd\073\uffbd\074\uffbd\001\002\000\030\004\103\005" +
    "\104\006\106\007\072\010\075\011\100\012\110\044\076" +
    "\045\066\061\102\062\114\001\002\000\016\002\uffdd\016" +
    "\uffdd\017\uffdd\022\uffdd\067\uffdd\074\uffdd\001\002\000\030" +
    "\004\103\005\104\006\106\007\072\010\075\011\100\012" +
    "\110\044\076\045\066\061\102\062\114\001\002\000\030" +
    "\004\103\005\104\006\106\007\072\010\075\011\100\012" +
    "\110\044\076\045\066\061\102\062\114\001\002\000\030" +
    "\004\103\005\104\006\106\007\072\010\075\011\100\012" +
    "\110\044\076\045\066\061\102\062\114\001\002\000\016" +
    "\002\uffdc\016\uffdc\017\uffdc\022\uffdc\067\uffdc\074\uffdc\001" +
    "\002\000\004\063\120\001\002\000\072\002\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\021\uffc3\022\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\063\uffc3\064" +
    "\uffc3\065\uffc3\067\uffc3\070\uffc3\071\uffc3\073\uffc3\074\uffc3" +
    "\001\002\000\016\002\uffdf\016\uffdf\017\uffdf\022\uffdf\067" +
    "\uffdf\074\uffdf\001\002\000\004\021\123\001\002\000\054" +
    "\004\103\005\104\006\106\007\072\010\075\011\100\012" +
    "\110\014\105\020\111\022\uffe2\023\064\026\115\027\077" +
    "\030\113\031\061\032\112\044\076\045\066\061\102\062" +
    "\114\066\107\001\002\000\012\016\uffe3\017\uffe3\022\uffe3" +
    "\074\127\001\002\000\004\022\126\001\002\000\016\002" +
    "\uffe4\016\uffe4\017\uffe4\022\uffe4\067\uffe4\074\uffe4\001\002" +
    "\000\052\004\103\005\104\006\106\007\072\010\075\011" +
    "\100\012\110\014\105\020\111\023\064\026\115\027\077" +
    "\030\113\031\061\032\112\044\076\045\066\061\102\062" +
    "\114\066\107\001\002\000\016\002\uffe8\016\uffe8\017\uffe8" +
    "\022\uffe8\067\uffe8\074\uffe8\001\002\000\004\067\132\001" +
    "\002\000\016\002\uffd9\016\uffd9\017\uffd9\022\uffd9\067\uffd9" +
    "\074\uffd9\001\002\000\004\015\134\001\002\000\056\004" +
    "\103\005\104\006\106\007\072\010\075\011\100\012\110" +
    "\014\105\016\uffe2\017\uffe2\020\111\023\064\026\115\027" +
    "\077\030\113\031\061\032\112\044\076\045\066\061\102" +
    "\062\114\066\107\001\002\000\006\016\137\017\uffe0\001" +
    "\002\000\004\017\141\001\002\000\054\004\103\005\104" +
    "\006\106\007\072\010\075\011\100\012\110\014\105\017" +
    "\uffe2\020\111\023\064\026\115\027\077\030\113\031\061" +
    "\032\112\044\076\045\066\061\102\062\114\066\107\001" +
    "\002\000\004\017\uffe1\001\002\000\016\002\uffe5\016\uffe5" +
    "\017\uffe5\022\uffe5\067\uffe5\074\uffe5\001\002\000\064\002" +
    "\uffca\015\uffca\016\uffca\017\uffca\021\uffca\022\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051\uffca\052" +
    "\uffca\053\uffca\054\uffca\055\uffca\056\uffca\057\uffca\060\uffca" +
    "\063\uffca\065\uffca\067\uffca\071\uffca\074\uffca\001\002\000" +
    "\016\002\uffdb\016\uffdb\017\uffdb\022\uffdb\067\uffdb\074\uffdb" +
    "\001\002\000\072\002\uffcb\015\uffcb\016\uffcb\017\uffcb\021" +
    "\uffcb\022\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\047\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\063\uffcb\064\146\065\uffcb\067\uffcb" +
    "\070\147\071\uffcb\073\145\074\uffcb\001\002\000\004\006" +
    "\uffaf\001\002\000\030\004\103\005\104\006\106\007\072" +
    "\010\075\011\100\012\110\044\076\045\066\061\102\062" +
    "\114\001\002\000\004\006\uffb0\001\002\000\004\006\151" +
    "\001\002\000\072\002\uffc7\015\uffc7\016\uffc7\017\uffc7\021" +
    "\uffc7\022\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7" +
    "\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055\uffc7\056" +
    "\uffc7\057\uffc7\060\uffc7\063\uffc7\064\uffc7\065\uffc7\067\uffc7" +
    "\070\uffc7\071\uffc7\073\uffc7\074\uffc7\001\002\000\004\065" +
    "\153\001\002\000\072\002\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\021\uffc8\022\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\060\uffc8\063\uffc8\064\uffc8\065\uffc8\067" +
    "\uffc8\070\uffc8\071\uffc8\073\uffc8\074\uffc8\001\002\000\030" +
    "\004\103\005\104\006\106\007\072\010\075\011\100\012" +
    "\110\044\076\045\066\061\102\062\114\001\002\000\016" +
    "\002\uffe6\016\uffe6\017\uffe6\022\uffe6\067\uffe6\074\uffe6\001" +
    "\002\000\030\004\103\005\104\006\106\007\072\010\075" +
    "\011\100\012\110\044\076\045\066\061\102\062\114\001" +
    "\002\000\030\004\103\005\104\006\106\007\072\010\075" +
    "\011\100\012\110\044\076\045\066\061\102\062\114\001" +
    "\002\000\030\004\103\005\104\006\106\007\072\010\075" +
    "\011\100\012\110\044\076\045\066\061\102\062\114\001" +
    "\002\000\030\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb" +
    "\011\uffbb\012\uffbb\044\uffbb\045\uffbb\061\uffbb\062\uffbb\001" +
    "\002\000\030\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba" +
    "\011\uffba\012\uffba\044\uffba\045\uffba\061\uffba\062\uffba\001" +
    "\002\000\056\002\uffd1\015\uffd1\016\uffd1\017\uffd1\021\uffd1" +
    "\022\uffd1\043\uffd1\044\uffd1\050\uffd1\051\165\052\166\053" +
    "\172\054\170\055\167\056\171\057\uffd1\060\uffd1\063\uffd1" +
    "\065\uffd1\067\uffd1\071\uffd1\074\uffd1\001\002\000\030\004" +
    "\103\005\104\006\106\007\072\010\075\011\100\012\110" +
    "\044\076\045\066\061\102\062\114\001\002\000\030\004" +
    "\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9" +
    "\044\uffb9\045\uffb9\061\uffb9\062\uffb9\001\002\000\030\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\044\uffb8\045\uffb8\061\uffb8\062\uffb8\001\002\000\030\004" +
    "\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7" +
    "\044\uffb7\045\uffb7\061\uffb7\062\uffb7\001\002\000\030\004" +
    "\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\044\uffb6\045\uffb6\061\uffb6\062\uffb6\001\002\000\030\004" +
    "\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4" +
    "\044\uffb4\045\uffb4\061\uffb4\062\uffb4\001\002\000\030\004" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\012\uffb5" +
    "\044\uffb5\045\uffb5\061\uffb5\062\uffb5\001\002\000\056\002" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\021\uffcf\022\uffcf\043\uffcf" +
    "\044\uffcf\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\063\uffcf\065\uffcf\067\uffcf" +
    "\071\uffcf\074\uffcf\001\002\000\032\002\uffd4\015\uffd4\016" +
    "\uffd4\017\uffd4\021\uffd4\022\uffd4\050\uffd4\063\uffd4\065\uffd4" +
    "\067\uffd4\071\uffd4\074\uffd4\001\002\000\036\002\uffd3\015" +
    "\uffd3\016\uffd3\017\uffd3\021\uffd3\022\uffd3\050\uffd3\057\161" +
    "\060\162\063\uffd3\065\uffd3\067\uffd3\071\uffd3\074\uffd3\001" +
    "\002\000\072\002\uffc5\015\uffc5\016\uffc5\017\uffc5\021\uffc5" +
    "\022\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050" +
    "\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\056\uffc5" +
    "\057\uffc5\060\uffc5\063\uffc5\064\uffc5\065\uffc5\067\uffc5\070" +
    "\uffc5\071\uffc5\073\uffc5\074\uffc5\001\002\000\030\004\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\044" +
    "\uffb1\045\uffb1\061\uffb1\062\uffb1\001\002\000\030\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\044" +
    "\uffb3\045\uffb3\061\uffb3\062\uffb3\001\002\000\030\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2\044" +
    "\uffb2\045\uffb2\061\uffb2\062\uffb2\001\002\000\030\004\103" +
    "\005\104\006\106\007\072\010\075\011\100\012\110\044" +
    "\076\045\066\061\102\062\114\001\002\000\056\002\uffcd" +
    "\015\uffcd\016\uffcd\017\uffcd\021\uffcd\022\uffcd\043\uffcd\044" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd" +
    "\056\uffcd\057\uffcd\060\uffcd\063\uffcd\065\uffcd\067\uffcd\071" +
    "\uffcd\074\uffcd\001\002\000\004\062\205\001\002\000\032" +
    "\004\103\005\104\006\106\007\072\010\075\011\100\012" +
    "\110\044\076\045\066\061\102\062\114\063\uffd7\001\002" +
    "\000\004\063\213\001\002\000\006\063\uffd5\071\uffd5\001" +
    "\002\000\006\063\uffd8\071\211\001\002\000\030\004\103" +
    "\005\104\006\106\007\072\010\075\011\100\012\110\044" +
    "\076\045\066\061\102\062\114\001\002\000\006\063\uffd6" +
    "\071\uffd6\001\002\000\016\002\uffda\016\uffda\017\uffda\022" +
    "\uffda\067\uffda\074\uffda\001\002\000\016\002\uffde\016\uffde" +
    "\017\uffde\022\uffde\067\uffde\074\uffde\001\002\000\004\002" +
    "\000\001\002\000\010\013\011\024\004\033\012\001\002" +
    "\000\052\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011" +
    "\uffff\012\uffff\014\uffff\020\uffff\023\uffff\026\uffff\027\uffff" +
    "\030\uffff\031\uffff\032\uffff\044\uffff\045\uffff\061\uffff\062" +
    "\uffff\066\uffff\001\002\000\006\074\ufffd\075\ufffd\001\002" +
    "\000\004\006\222\001\002\000\006\074\ufffa\075\ufffa\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\220\000\012\002\005\003\007\004\004\005\006\001" +
    "\001\000\004\006\220\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\013\067\014\061\015" +
    "\100\022\073\023\072\024\070\025\066\026\064\027\062" +
    "\030\057\031\056\001\001\000\002\001\001\000\004\006" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\024\007\025\010\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\024\010\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\044\001\001\000\006\006\046\012\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\051\003\007\004\004\005\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\022\213\023\072\024\070\025\066\026\064" +
    "\027\062\030\057\031\056\001\001\000\002\001\001\000" +
    "\004\035\147\001\001\000\002\001\001\000\004\034\201" +
    "\001\001\000\006\030\175\031\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\163\001\001\000\002" +
    "\001\001\000\004\032\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\027\143\030\057\031\056\001\001" +
    "\000\022\022\142\023\072\024\070\025\066\026\064\027" +
    "\062\030\057\031\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\141\027\062\030\057\031\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\022\132" +
    "\023\072\024\070\025\066\026\064\027\062\030\057\031" +
    "\056\001\001\000\002\001\001\000\012\002\130\003\007" +
    "\004\004\005\006\001\001\000\002\001\001\000\022\022" +
    "\121\023\072\024\070\025\066\026\064\027\062\030\057" +
    "\031\056\001\001\000\002\001\001\000\022\022\120\023" +
    "\072\024\070\025\066\026\064\027\062\030\057\031\056" +
    "\001\001\000\022\022\116\023\072\024\070\025\066\026" +
    "\064\027\062\030\057\031\056\001\001\000\022\022\115" +
    "\023\072\024\070\025\066\026\064\027\062\030\057\031" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\014" +
    "\123\015\100\016\124\022\073\023\072\024\070\025\066" +
    "\026\064\027\062\030\057\031\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\015\127" +
    "\022\073\023\072\024\070\025\066\026\064\027\062\030" +
    "\057\031\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\014\123\015" +
    "\100\016\134\022\073\023\072\024\070\025\066\026\064" +
    "\027\062\030\057\031\056\001\001\000\004\017\135\001" +
    "\001\000\002\001\001\000\030\014\123\015\100\016\137" +
    "\022\073\023\072\024\070\025\066\026\064\027\062\030" +
    "\057\031\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\035\147\001" +
    "\001\000\002\001\001\000\022\022\151\023\072\024\070" +
    "\025\066\026\064\027\062\030\057\031\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\022\154\023\072\024" +
    "\070\025\066\026\064\027\062\030\057\031\056\001\001" +
    "\000\002\001\001\000\020\023\174\024\070\025\066\026" +
    "\064\027\062\030\057\031\056\001\001\000\022\022\173" +
    "\023\072\024\070\025\066\026\064\027\062\030\057\031" +
    "\056\001\001\000\016\024\162\025\066\026\064\027\062" +
    "\030\057\031\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\033\163\001\001\000\014\025\172\026\064" +
    "\027\062\030\057\031\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\032\157\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\202\027\062\030\057\031\056\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\020\205\021\207\022\206\023" +
    "\072\024\070\025\066\026\064\027\062\030\057\031\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\022\211\023\072\024\070\025\066\026\064" +
    "\027\062\030\057\031\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Prog ::= SeccionDec SeccionInst 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Prog",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Prog EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SeccionDec ::= Decs Sep 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SeccionDec",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SeccionDec ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SeccionDec",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decs ::= Decs PunCo Dec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Decs",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Decs ::= Dec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Decs",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= Var Tipo Variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= Type Tipo Variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= Proc Variable PAp Params PCie LAp Prog LCie 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Tipo ::= Int 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Tipo ::= Real 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Tipo ::= Bool 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Tipo ::= String 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Tipo ::= Variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Tipo ::= Array CAp EntNum CCie Of Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Tipo ::= Record LAp RecDecs LCie 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Tipo ::= Pointer Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tipo",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RecDecs ::= RecDecs PunCo RDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RecDecs",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RecDecs ::= RDec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RecDecs",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RDec ::= Tipo Variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RDec",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Params ::= Params Param 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Params ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Params",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Param ::= Tipo Variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Param ::= Tipo Andvers Variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SeccionInst ::= Insts 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SeccionInst",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Insts ::= Insts PunCo Inst 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Insts",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Insts ::= Inst 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Insts",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Inst ::= Expr0 Asig Expr0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Inst ::= If Expr0 Then OpInsts ELSE Endif 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Inst ::= While Expr0 Do OpInsts Endwhile 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // OpInsts ::= Insts 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpInsts",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // OpInsts ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OpInsts",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELSE ::= Else OpInsts 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELSE",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELSE ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ELSE",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Inst ::= Read Expr0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Inst ::= Write Expr0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Inst ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Inst ::= New Expr0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Inst ::= Delete Expr0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Inst ::= Call Variable PAp RParams PCie 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Inst ::= LAp Prog LCie 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RParams ::= RPars 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RParams",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RParams ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RParams",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RPars ::= RPars Coma Expr0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RPars",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RPars ::= Expr0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("RPars",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expr0 ::= Expr1 Sum Expr0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr0",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expr0 ::= Expr1 Res Expr1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr0",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expr0 ::= Expr1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr0",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expr1 ::= Expr1 Op1 Expr2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr1",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Expr1 ::= Expr2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr1",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expr2 ::= Expr2 Op2 Expr3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr2",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expr2 ::= Expr3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr2",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Expr3 ::= Expr4 Op3 Expr4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr3",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Expr3 ::= Expr4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr3",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr4 ::= Res Expr5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr4",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr4 ::= Not Expr4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr4",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr4 ::= Expr5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr4",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr5 ::= Expr5 CAp Expr0 CCie 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr5",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr5 ::= Expr5 Op5 Variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr5",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr5 ::= Expr6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr5",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr6 ::= Mul Expr6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr6",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr6 ::= Expr7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr6",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr7 ::= PAp Expr0 PCie 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr7 ::= Variable 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr7 ::= EntNum 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr7 ::= RealNum 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr7 ::= True 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr7 ::= False 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr7 ::= Null 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr7 ::= LitCad 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Expr7",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Op1 ::= And 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Op1 ::= Or 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op1",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Op2 ::= Menor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Op2 ::= Mayor 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Op2 ::= MenIg 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Op2 ::= MayIg 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Op2 ::= Ig 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Op2 ::= Dist 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op2",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Op3 ::= Mul 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Op3 ::= Div 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Op3 ::= Mod 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op3",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Op5 ::= Punto 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op5",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Op5 ::= Flecha 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Op5",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}


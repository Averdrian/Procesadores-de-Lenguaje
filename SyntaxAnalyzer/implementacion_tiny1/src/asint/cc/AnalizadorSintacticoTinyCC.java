/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTinyCC.java */
package asint.cc;

public class AnalizadorSintacticoTinyCC implements AnalizadorSintacticoTinyCCConstants {

  final public void Start() throws ParseException {
    Prog();
    jj_consume_token(0);
  }

  final public void Prog() throws ParseException {
    SeccionDec();
    SeccionInst();
  }

  final public void SeccionDec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Var:
    case Proc:
    case Type:
      Decs();
      jj_consume_token(43);
      break;
    default:
      jj_la1[0] = jj_gen;

    }
  }

  final public void Decs() throws ParseException {
    Dec();
    ReDecs();
  }

  final public void ReDecs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
      jj_consume_token(44);
      Dec();
      ReDecs();
      break;
    default:
      jj_la1[1] = jj_gen;

    }
  }

  final public void Dec() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Var:
      jj_consume_token(Var);
      Tipo();
      jj_consume_token(Variable);
      break;
    case Type:
      jj_consume_token(Type);
      Tipo();
      jj_consume_token(Variable);
      break;
    case Proc:
      jj_consume_token(Proc);
      jj_consume_token(Variable);
      jj_consume_token(45);
      Params();
      jj_consume_token(46);
      jj_consume_token(47);
      Prog();
      jj_consume_token(48);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Int:
      jj_consume_token(Int);
      break;
    case Real:
      jj_consume_token(Real);
      break;
    case Bool:
      jj_consume_token(Bool);
      break;
    case String:
      jj_consume_token(String);
      break;
    case Variable:
      jj_consume_token(Variable);
      break;
    case Array:
      jj_consume_token(Array);
      jj_consume_token(49);
      jj_consume_token(EntNum);
      jj_consume_token(50);
      jj_consume_token(Of);
      Tipo();
      break;
    case Record:
      jj_consume_token(Record);
      jj_consume_token(47);
      RecordDecs();
      jj_consume_token(48);
      break;
    case Pointer:
      jj_consume_token(Pointer);
      Tipo();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void RecordDecs() throws ParseException {
    RDec();
    ReRecordDecs();
  }

  final public void ReRecordDecs() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
      jj_consume_token(44);
      RDec();
      ReRecordDecs();
      break;
    default:
      jj_la1[4] = jj_gen;

    }
  }

  final public void RDec() throws ParseException {
    Tipo();
    jj_consume_token(Variable);
  }

  final public void Params() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Int:
    case Real:
    case Bool:
    case Array:
    case Record:
    case String:
    case Pointer:
    case Variable:
      Param();
      ReParams();
      break;
    default:
      jj_la1[5] = jj_gen;

    }
  }

  final public void ReParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      jj_consume_token(51);
      Param();
      ReParams();
      break;
    default:
      jj_la1[6] = jj_gen;

    }
  }

  final public void Param() throws ParseException {
    Tipo();
    Ref();
    jj_consume_token(Variable);
  }

  final public void Ref() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 52:
      jj_consume_token(52);
      break;
    default:
      jj_la1[7] = jj_gen;

    }
  }

  final public void SeccionInst() throws ParseException {
    Insts();
  }

  final public void Insts() throws ParseException {
    Inst();
    ReInsts();
  }

  final public void ReInsts() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
      jj_consume_token(44);
      Inst();
      ReInsts();
      break;
    default:
      jj_la1[8] = jj_gen;

    }
  }

  final public void Inst() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Not:
    case True:
    case Null:
    case False:
    case EntNum:
    case RealNum:
    case Variable:
    case LitCad:
    case 45:
    case 55:
    case 56:
      Expr0();
      jj_consume_token(53);
      Expr0();
      break;
    case If:
      jj_consume_token(If);
      Expr0();
      jj_consume_token(Then);
      OpInsts();
      ELSE();
      jj_consume_token(Endif);
      break;
    case While:
      jj_consume_token(While);
      Expr0();
      jj_consume_token(Do);
      OpInsts();
      jj_consume_token(Endwhile);
      break;
    case Read:
      jj_consume_token(Read);
      Expr0();
      break;
    case Write:
      jj_consume_token(Write);
      Expr0();
      break;
    case NL:
      jj_consume_token(NL);
      break;
    case New:
      jj_consume_token(New);
      Expr0();
      break;
    case Delete:
      jj_consume_token(Delete);
      Expr0();
      break;
    case Call:
      jj_consume_token(Call);
      jj_consume_token(Variable);
      jj_consume_token(45);
      RParams();
      jj_consume_token(46);
      break;
    case 47:
      jj_consume_token(47);
      Prog();
      jj_consume_token(48);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void OpInsts() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case If:
    case NL:
    case Not:
    case New:
    case Read:
    case True:
    case Call:
    case Null:
    case While:
    case Write:
    case False:
    case Delete:
    case EntNum:
    case RealNum:
    case Variable:
    case LitCad:
    case 45:
    case 47:
    case 55:
    case 56:
      Insts();
      break;
    default:
      jj_la1[10] = jj_gen;

    }
  }

  final public void ELSE() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Else:
      jj_consume_token(Else);
      OpInsts();
      break;
    default:
      jj_la1[11] = jj_gen;

    }
  }

  final public void RParams() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Not:
    case True:
    case Null:
    case False:
    case EntNum:
    case RealNum:
    case Variable:
    case LitCad:
    case 45:
    case 55:
    case 56:
      RPars();
      break;
    default:
      jj_la1[12] = jj_gen;

    }
  }

  final public void RPars() throws ParseException {
    Expr0();
    ReRPars();
  }

  final public void ReRPars() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 51:
      jj_consume_token(51);
      Expr0();
      ReRPars();
      break;
    default:
      jj_la1[13] = jj_gen;

    }
  }

  final public void Expr0() throws ParseException {
    Expr1();
    ReExpr0();
  }

  final public void ReExpr0() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 54:
      jj_consume_token(54);
      Expr0();
      break;
    case 55:
      jj_consume_token(55);
      Expr1();
      break;
    default:
      jj_la1[14] = jj_gen;

    }
  }

  final public void Expr1() throws ParseException {
    Expr2();
    ReExpr1();
  }

  final public void ReExpr1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case Or:
    case And:
      Op1();
      Expr2();
      ReExpr1();
      break;
    default:
      jj_la1[15] = jj_gen;

    }
  }

  final public void Expr2() throws ParseException {
    Expr3();
    ReExpr2();
  }

  final public void ReExpr2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
      Op2();
      Expr3();
      ReExpr2();
      break;
    default:
      jj_la1[16] = jj_gen;

    }
  }

  final public void Expr3() throws ParseException {
    Expr4();
    ReExpr3();
  }

  final public void ReExpr3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
    case 63:
    case 64:
      Op3();
      Expr4();
      break;
    default:
      jj_la1[17] = jj_gen;

    }
  }

  final public void Expr4() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 55:
      jj_consume_token(55);
      Expr5();
      break;
    case Not:
      jj_consume_token(Not);
      Expr4();
      break;
    case True:
    case Null:
    case False:
    case EntNum:
    case RealNum:
    case Variable:
    case LitCad:
    case 45:
    case 56:
      Expr5();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Expr5() throws ParseException {
    Expr6();
    ReExpr5();
  }

  final public void ReExpr5() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 65:
    case 66:
      Op5();
      jj_consume_token(Variable);
      ReExpr5();
      break;
    case 49:
      jj_consume_token(49);
      Expr0();
      jj_consume_token(50);
      ReExpr5();
      break;
    default:
      jj_la1[19] = jj_gen;

    }
  }

  final public void Expr6() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
      jj_consume_token(56);
      Expr6();
      break;
    case True:
    case Null:
    case False:
    case EntNum:
    case RealNum:
    case Variable:
    case LitCad:
    case 45:
      Expr7();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Expr7() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 45:
      jj_consume_token(45);
      Expr0();
      jj_consume_token(46);
      break;
    case Variable:
      jj_consume_token(Variable);
      break;
    case EntNum:
      jj_consume_token(EntNum);
      break;
    case RealNum:
      jj_consume_token(RealNum);
      break;
    case True:
      jj_consume_token(True);
      break;
    case False:
      jj_consume_token(False);
      break;
    case Null:
      jj_consume_token(Null);
      break;
    case LitCad:
      jj_consume_token(LitCad);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Op1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case And:
      jj_consume_token(And);
      break;
    case Or:
      jj_consume_token(Or);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Op2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 57:
      jj_consume_token(57);
      break;
    case 58:
      jj_consume_token(58);
      break;
    case 59:
      jj_consume_token(59);
      break;
    case 60:
      jj_consume_token(60);
      break;
    case 61:
      jj_consume_token(61);
      break;
    case 62:
      jj_consume_token(62);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Op3() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
      jj_consume_token(56);
      break;
    case 63:
      jj_consume_token(63);
      break;
    case 64:
      jj_consume_token(64);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Op5() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 65:
      jj_consume_token(65);
      break;
    case 66:
      jj_consume_token(66);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  public AnalizadorSintacticoTinyCCTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[26];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_0();
      jj_la1_1();
      jj_la1_2();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x5100,0x0,0x5100,0x36030200,0x0,0x36030200,0x0,0x0,0x0,0x8ecac12,0x8ecac12,0x4,0x888400,0x0,0x0,0xc0,0x0,0x0,0x888400,0x0,0x888000,0x888000,0xc0,0x0,0x0,0x0,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x1000,0x0,0x80,0x1000,0x80,0x80000,0x100000,0x1000,0x180a1e0,0x180a1e0,0x0,0x18021e0,0x80000,0xc00000,0x0,0x7e000000,0x81000000,0x18021e0,0x20000,0x10021e0,0x21e0,0x0,0x7e000000,0x81000000,0x0,};
   }
   private static void jj_la1_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x6,0x0,0x0,0x0,0x0,0x1,0x6,};
   }

  public AnalizadorSintacticoTinyCC(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoTinyCCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  public AnalizadorSintacticoTinyCC(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalizadorSintacticoTinyCCTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  public AnalizadorSintacticoTinyCC(AnalizadorSintacticoTinyCCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  public void ReInit(AnalizadorSintacticoTinyCCTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 26; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[67];
    for (int i = 0; i < 67; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 26; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

                                         }

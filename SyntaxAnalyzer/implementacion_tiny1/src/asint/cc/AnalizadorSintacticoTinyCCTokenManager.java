/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTinyCCTokenManager.java */
package asint.cc;

public class AnalizadorSintacticoTinyCCTokenManager implements AnalizadorSintacticoTinyCCConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7ffffffeL) != 0L)
         {
            jjmatchedKind = 39;
            return 1;
         }
         if ((active0 & 0xc0000000000000L) != 0L || (active1 & 0x4L) != 0L)
            return 9;
         return -1;
      case 1:
         if ((active0 & 0x7aL) != 0L)
            return 1;
         if ((active0 & 0x7fffff84L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0xf80L) != 0L)
            return 1;
         if ((active0 & 0x7ffff004L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x1ff004L) != 0L)
            return 1;
         if ((active0 & 0x7fe00000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 3;
            return 1;
         }
         return -1;
      case 4:
         if ((active0 & 0x3e00000L) != 0L)
            return 1;
         if ((active0 & 0x7c000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 4;
            return 1;
         }
         return -1;
      case 5:
         if ((active0 & 0x60000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x1c000000L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 39;
            jjmatchedPos = 6;
            return 1;
         }
         if ((active0 & 0x20000000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 37:
         return jjStopAtPos(0, 64);
      case 38:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 45);
      case 41:
         return jjStopAtPos(0, 46);
      case 42:
         return jjStopAtPos(0, 56);
      case 43:
         return jjStartNfaWithStates_0(0, 54, 9);
      case 44:
         return jjStopAtPos(0, 51);
      case 45:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4L);
      case 46:
         return jjStopAtPos(0, 65);
      case 47:
         return jjStopAtPos(0, 63);
      case 59:
         return jjStopAtPos(0, 44);
      case 60:
         jjmatchedKind = 57;
         return jjMoveStringLiteralDfa1_0(0x800000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 53;
         return jjMoveStringLiteralDfa1_0(0x2000000000000000L, 0x0L);
      case 62:
         jjmatchedKind = 58;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 49);
      case 93:
         return jjStopAtPos(0, 50);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x2000080L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x40000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x8000020L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x41000004L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x202L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x80c10L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x48L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x20001000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x4012000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10c000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x600000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 47);
      case 125:
         return jjStopAtPos(0, 48);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 43);
         break;
      case 61:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(1, 59);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(1, 61);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(1, 62);
         break;
      case 62:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x840100L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0xc012800L, active1, 0L);
      case 102:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(1, 1, 1);
         else if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(1, 3, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000L, active1, 0L);
      case 108:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(1, 4, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x4L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x41000280L, active1, 0L);
      case 111:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(1, 5, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x20020400L, active1, 0L);
      case 114:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x2409000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x12000L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 100:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 7, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x41000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x20600000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x88c0000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x21000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x12000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L);
      case 116:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 1);
         else if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 10, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 119:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(2, 11, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      case 99:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 1);
         break;
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 13, 1);
         break;
      case 101:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 2, 1);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 1);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x11000000L);
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 1);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 1);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 1);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 1);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 22, 1);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 1);
         break;
      case 102:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x28000000L);
      case 121:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(5, 26, 1);
         break;
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 27, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 103:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 28, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 114:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 31;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 48)
                     jjCheckNAddTwoStates(14, 19);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAdd(10);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 37)
                        kind = 37;
                  }
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddStates(3, 6);
                  }
                  else if ((0x100002700L & l) != 0L)
                  {
                     if (kind > 41)
                        kind = 41;
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjAddStates(7, 10);
                  else if (curChar == 48)
                  {
                     if (kind > 37)
                        kind = 37;
                     jjCheckNAddTwoStates(14, 19);
                  }
                  else if (curChar == 35)
                  {
                     if (kind > 42)
                        kind = 42;
                     jjCheckNAdd(7);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 3:
                  if ((0xfffffffbffffdaffL & l) != 0L)
                     jjCheckNAddTwoStates(3, 4);
                  break;
               case 4:
                  if (curChar == 34 && kind > 40)
                     kind = 40;
                  break;
               case 5:
                  if ((0x100002700L & l) != 0L && kind > 41)
                     kind = 41;
                  break;
               case 6:
                  if (curChar != 35)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(7, 10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if (curChar == 48 && kind > 37)
                     kind = 37;
                  break;
               case 12:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 15:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(16, 18);
                  break;
               case 16:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 48 && kind > 38)
                     kind = 38;
                  break;
               case 19:
                  if (curChar == 46)
                     jjCheckNAddStates(11, 14);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if ((0x3fe000000000000L & l) != 0L && kind > 38)
                     kind = 38;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(22, 23);
                  break;
               case 23:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 25:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 18);
                  break;
               case 26:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  jjCheckNAdd(27);
                  break;
               case 28:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(14, 19);
                  break;
               case 29:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddStates(3, 6);
                  break;
               case 30:
                  if (curChar != 48)
                     break;
                  if (kind > 37)
                     kind = 37;
                  jjCheckNAddTwoStates(14, 19);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 39)
                     kind = 39;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  jjAddStates(15, 16);
                  break;
               case 7:
                  if (kind > 42)
                     kind = 42;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 14:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(17, 19);
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(20, 22);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(15, 16);
                  break;
               case 7:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 42)
                     kind = 42;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 31 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   13, 14, 19, 10, 13, 14, 19, 9, 11, 12, 28, 20, 21, 22, 23, 3, 
   4, 15, 16, 18, 25, 26, 18, 
};
public static final String[] jjstrLiteralImages = {
"", "\151\146", "\145\154\163\145", "\157\146", "\156\154", "\144\157", 
"\157\162", "\141\156\144", "\166\141\162", "\151\156\164", "\156\157\164", 
"\156\145\167", "\160\162\157\143", "\162\145\141\144", "\164\171\160\145", 
"\164\162\165\145", "\162\145\141\154", "\142\157\157\154", "\143\141\154\154", 
"\156\165\154\154", "\164\150\145\156", "\167\150\151\154\145", "\167\162\151\164\145", 
"\146\141\154\163\145", "\145\156\144\151\146", "\141\162\162\141\171", "\162\145\143\157\162\144", 
"\144\145\154\145\164\145", "\163\164\162\151\156\147", "\160\157\151\156\164\145\162", 
"\145\156\144\167\150\151\154\145", null, null, null, null, null, null, null, null, null, null, null, null, 
"\46\46", "\73", "\50", "\51", "\173", "\175", "\133", "\135", "\54", "\46", "\75", 
"\53", "\55", "\52", "\74", "\76", "\74\75", "\76\75", "\75\75", "\41\75", "\57", 
"\45", "\56", "\55\76", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffff9e07fffffffL, 0x7L, 
};
static final long[] jjtoSkip = {
   0x60000000000L, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[31];
private final int[] jjstateSet = new int[62];
protected char curChar;
public AnalizadorSintacticoTinyCCTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public AnalizadorSintacticoTinyCCTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 31; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
